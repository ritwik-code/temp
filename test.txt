import React, { useState } from 'react';
import * as UTIF from 'utif';

const TiffUploader: React.FC = () => {
  const [error, setError] = useState<string | null>(null);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [pages, setPages] = useState<any[]>([]);
  const [jpegImage, setJpegImage] = useState<HTMLImageElement | null>(null);
  const [loading, setLoading] = useState(false);
  const [zoom, setZoom] = useState(1);

  // Common logic to decode and display TIFF from ArrayBuffer
  const decodeAndSetPages = (arrayBuffer: ArrayBuffer) => {
    setJpegImage(null); // Clear JPEG if any
    try {
      const ifds = UTIF.decode(arrayBuffer);
      if (ifds.length === 0) {
        setError('No images found in the TIFF file.');
        setPages([]);
        return;
      }
      for (let i = 0; i < ifds.length; i++) {
        try {
          UTIF.decodeImage(arrayBuffer, ifds[i]);
        } catch (pageError) {
          console.error(`Error processing page ${i}:`, pageError);
        }
      }
      setPages(ifds);
      setError(null);
    } catch (err) {
      console.error('Failed to decode TIFF:', err);
      setError(`Failed to decode the TIFF file: ${err instanceof Error ? err.message : 'Unknown error'}`);
      setPages([]);
    }
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    setJpegImage(null);
    const file = e.target.files?.[0];
    if (!file) return;
    setLoading(true);
    setError(null);
    try {
      const arrayBuffer = await file.arrayBuffer();
      decodeAndSetPages(arrayBuffer);
    } finally {
      setLoading(false);
    }
  };

  // Fetch TIFF from backend
  const handleFetchFromBackend = async () => {
    setLoading(true);
    setError(null);
    setJpegImage(null);
    try {
      const response = await fetch('http://localhost:8080/file?mimeType=image/jpeg');
      if (!response.ok) throw new Error('Failed to fetch file from backend');
      const contentType = response.headers.get('content-type') || '';
      const blob = await response.blob();
      if (contentType.includes('image/jpeg')) {
        // Render JPEG in canvas
        const img = new window.Image();
        img.onload = () => {
          setJpegImage(img);
          setPages([]);
        };
        img.onerror = () => setError('Failed to load JPEG image.');
        img.src = URL.createObjectURL(blob);
      } else if (contentType.includes('image/tiff') || contentType.includes('image/tif')) {
        // Decode TIFF
        const arrayBuffer = await blob.arrayBuffer();
        decodeAndSetPages(arrayBuffer);
      } else {
        setError('Unsupported file type from backend.');
      }
    } catch (err) {
      setError('Failed to fetch or decode file from backend.');
    } finally {
      setLoading(false);
    }
  };

  // Zoom controls
  const handleZoomIn = () => setZoom((z) => Math.min(z * 1.2, 10));
  const handleZoomOut = () => setZoom((z) => Math.max(z / 1.2, 0.1));
  const handleZoomReset = () => setZoom(1);

  // Child component for each TIFF page (no zoom here, zoom is on the group)
  const TiffPageCanvas: React.FC<{ ifd: any; idx: number }> = ({ ifd }) => {
    const canvasRef = React.useRef<HTMLCanvasElement>(null);
    React.useEffect(() => {
      if (canvasRef.current && ifd.width && ifd.height) {
        try {
          const rgba = UTIF.toRGBA8(ifd);
          canvasRef.current.width = ifd.width;
          canvasRef.current.height = ifd.height;
          const ctx = canvasRef.current.getContext('2d');
          if (ctx) {
            const imageData = new ImageData(new Uint8ClampedArray(rgba), ifd.width, ifd.height);
            ctx.putImageData(imageData, 0, 0);
          }
        } catch (err) {
          // ignore per-page errors
        }
      }
    }, [ifd]);
    return (
      <canvas
        ref={canvasRef}
        style={{
          display: 'block',
          maxWidth: '100%',
          height: 'auto',
          marginBottom: 16
        }}
      />
    );
  };

  // JPEG canvas renderer
  const JpegCanvas: React.FC<{ img: HTMLImageElement }> = ({ img }) => {
    const canvasRef = React.useRef<HTMLCanvasElement>(null);
    React.useEffect(() => {
      if (canvasRef.current && img.complete) {
        canvasRef.current.width = img.naturalWidth;
        canvasRef.current.height = img.naturalHeight;
        const ctx = canvasRef.current.getContext('2d');
        if (ctx) ctx.drawImage(img, 0, 0);
      }
    }, [img]);
    return (
      <canvas
        ref={canvasRef}
        style={{
          display: 'block',
          maxWidth: '100%',
          height: 'auto',
          marginBottom: 16
        }}
      />
    );
  };

  // Handle Ctrl+scroll for zoom
  const scrollContainerRef = React.useRef<HTMLDivElement>(null);
  React.useEffect(() => {
    const handleWheel = (e: WheelEvent) => {
      if ((e.ctrlKey || e.metaKey) && (pages.length > 0 || jpegImage)) {
        e.preventDefault();
        if (e.deltaY < 0) {
          setZoom((z) => Math.min(z * 1.1, 10));
        } else if (e.deltaY > 0) {
          setZoom((z) => Math.max(z / 1.1, 0.1));
        }
      }
    };
    const el = scrollContainerRef.current;
    if (el) el.addEventListener('wheel', handleWheel, { passive: false });
    return () => { if (el) el.removeEventListener('wheel', handleWheel); };
  }, [pages.length, jpegImage]);

  return (
    <div style={{ padding: '20px' }}>
      <div style={{ marginBottom: '20px', display: 'flex', gap: 12, alignItems: 'center' }}>
        <input 
          type="file" 
          accept=".tif,.tiff" 
          onChange={handleFileChange}
          disabled={loading}
        />
        <button onClick={handleFetchFromBackend} disabled={loading} style={{ padding: '6px 16px' }}>
          Load TIFF from backend
        </button>
        {loading && <span style={{ marginLeft: '10px', color: '#007bff' }}>Loading...</span>}
      </div>

      {/* Zoom controls */}
      <div style={{ marginBottom: '20px', display: 'flex', alignItems: 'center', gap: 8 }}>
        <button onClick={handleZoomOut} style={{ fontSize: 18, width: 32 }}>-</button>
        <span
          style={{ minWidth: 60, textAlign: 'center', cursor: 'pointer', userSelect: 'none' }}
          title="Click to reset zoom"
          onClick={handleZoomReset}
        >
          {Math.round(zoom * 100)}%
        </span>
        <button onClick={handleZoomIn} style={{ fontSize: 18, width: 32 }}>+</button>
        <button onClick={handleZoomReset} style={{ marginLeft: 12 }}>Reset</button>
      </div>

      {error && (
        <div style={{ 
          color: 'red', 
          backgroundColor: '#ffebee', 
          padding: '10px', 
          borderRadius: '4px',
          marginBottom: '20px'
        }}>
          {error}
        </div>
      )}

      {/* Show JPEG canvas if present, else TIFF canvases */}
      <div
        ref={scrollContainerRef}
        style={{
          maxHeight: '70vh',
          overflowY: 'auto',
          margin: '0 auto',
          padding: 0,
          minHeight: 200,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          background: 'none',
          border: 'none',
          boxShadow: 'none',
        }}
      >
        <div
          style={{
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: 0,
            transform: `scale(${zoom})`,
            transformOrigin: 'top center',
            transition: 'transform 0.15s',
          }}
        >
          {jpegImage ? (
            <JpegCanvas img={jpegImage} />
          ) : (
            pages.map((ifd, idx) => (
              <TiffPageCanvas key={idx} ifd={ifd} idx={idx} />
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default TiffUploader;
